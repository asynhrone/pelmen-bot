from vkbottle.bot import BotLabeler, Message, Bot
from functions import (get_user, converter, set_them, bot_get_user, get_reports, close_report,
                       get_user_by_report_id, get_admins)
from config import token, emoji_dict
from datetime import datetime, timedelta
import time

al = BotLabeler()
al.vbml_ignore_case = True
bot = Bot(token=token)

@al.message(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ")
async def monitoring(message: Message):
    user = await bot.api.users.get(message.from_id)
    start_time = time.time()
    user_info = await get_user(user_id=user[0].id)
    if user_info['status'] in ['–í–ª–∞–¥–µ–ª–µ—Ü', '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π']:
        end_time = time.time()
        ping_time = round(end_time - start_time, 3)
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        photo_id = "photo-222672748_456239022_acd808e85b126ec97c"
        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:"
                             f"\n\n‚åõ {current_time}"
                             f"\nüß≠ –ü–∏–Ω–≥: {ping_time} –º—Å."
                             "\nüîî –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω.", attachment=photo_id)
    else:
        return
    

@al.message(text=["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å <type> <userid> <count>"])
async def set(message: Message, type=None, userid=None,count=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info['status'] in ['–í–ª–∞–¥–µ–ª–µ—Ü', '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π']:
        if type is not None and count is not None and userid is not None:
            if type in ['–ë–∞–ª–∞–Ω—Å', '–±–∞–ª–∞–Ω—Å']:
                type = 'balance'
                userid = await bot_get_user(user_id=userid)
                count = await converter(count=count)
                await set_them(user_id=userid['id'], type=type, count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ @id{userid['id']}({userid['nickname']})"
                                     f" {count:,}$ ‚úÖ".replace(',', '.'))
                text_to_send = f"üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_info['nickname']}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª @id{userid['id']}({userid['nickname']}) –±–∞–ª–∞–Ω—Å –≤ {count}$"
                await bot.api.messages.send(user_id="507577425", random_id=0, message=text_to_send)
            if type in ['EXP', 'exp', 2]:
                type = 'exp'
                userid = await bot_get_user(user_id=userid)
                count = await converter(count=count)
                await set_them(user_id=userid['id'], type=type, count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ @id{userid['id']}({userid['nickname']})"
                                     f" {count:,} EXP ‚úÖ".replace(',', '.'))
                text_to_send = f"üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_info['nickname']}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª @id{userid['id']}({userid['nickname']}) {count} EXP"
                await bot.api.messages.send(user_id="507577425", random_id=0, message=text_to_send)
            if type in ['–£–¥–æ—á–∫–∞', '—É–¥–æ—á–∫–∞', '–£–¥–æ—á–∫—É', '—É–¥–æ—á–∫—É']:
                type = 'fishing_rob_level'
                userid = await bot_get_user(user_id=userid)
                count = await converter(count=count)
                await set_them(user_id=userid['id'], type=type, count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ @id{userid['id']}({userid['nickname']})"
                                     f" —É–¥–æ—á–∫—É {count:,} LVL ‚úÖ".replace(',', '.'))
                text_to_send = f"üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_info['nickname']}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª @id{userid['id']}({userid['nickname']}) {count} LVL —É–¥–æ—á–∫–∏"
                await bot.api.messages.send(user_id="507577425", random_id=0, message=text_to_send)
            if type in ['–ë–∏—Ç–∫–æ–∏–Ω', '–±–∏—Ç–∫–æ–∏–Ω']:
                type = 'bitcoin'
                userid = await bot_get_user(user_id=userid)
                count = await converter(count=count)
                await set_them(user_id=userid['id'], type=type, count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ @id{userid['id']}({userid['nickname']})"
                                     f" {count:,}‚Çø ‚úÖ".replace(',', '.'))
                text_to_send = f"üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_info['nickname']}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª @id{userid['id']}({userid['nickname']}) –±–∏—Ç–∫–æ–∏–Ω –±–∞–ª–∞–Ω—Å {count}‚Çø"
                await bot.api.messages.send(user_id="507577425", random_id=0, message=text_to_send)
            if type in ['–ù–∏–∫', '–Ω–∏–∫']:
                type = 'nickname'
                userid = await bot_get_user(user_id=userid)
                await set_them(user_id=userid['id'], type=type, count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ @id{userid['id']}({userid['nickname']})"
                                     f" –Ω–∏–∫ {count} ‚úÖ")
                text_to_send = f"üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_info['nickname']}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª @id{userid['id']}({userid['nickname']}) –Ω–∏–∫ {count}"
                await bot.api.messages.send(user_id="507577425", random_id=0, message=text_to_send)
            if type in ['–°—Ç–∞—Ç—É—Å', '—Å—Ç–∞—Ç—É—Å']:
                type = 'status'
                userid = await bot_get_user(user_id=userid)
                await set_them(user_id=userid['id'], type=type, count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ @id{userid['id']}({userid['nickname']})"
                                     f" –Ω–∏–∫ {count} ‚úÖ")
                text_to_send = f"üÜò –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_info['nickname']}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª @id{userid['id']}({userid['nickname']}) —Å—Ç–∞—Ç—É—Å {count}"
                await bot.api.messages.send(user_id="507577425", random_id=0, message=text_to_send)
        else:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
                                 "\n\n1. –ë–∞–ª–∞–Ω—Å"
                                 "\n2. EXP"
                                 "\n3. –£–¥–æ—á–∫–∞"
                                 "\n4. –ë–∏—Ç–∫–æ–∏–Ω"
                                 "\n5. –ù–∏–∫"
                                 "\n6. –°—Ç–∞—Ç—É—Å"
                                 "\n\n‚ùì –ü—Ä–∏–º–µ—Ä: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ¬´–±–∞–ª–∞–Ω—Å¬ª ¬´id¬ª ¬´—Å—É–º–º–∞¬ª")
    else:
        return
    

@al.message(text="–†–µ–ø–æ—Ä—Ç—ã")
async def reports(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info['status'] in ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–í–ª–∞–¥–µ–ª–µ—Ü', '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π']:
        reports = await get_reports()
        if reports:
            reports_str_list = []
            for report in reports:
                report_user = await get_user(user_id=report['author'])
                reports_str = f"–†–µ–ø–æ—Ä—Ç #Ô∏è{report['id']} | –û—Ç @id{report['author']}({report_user['nickname']}) | –°–æ–∑–¥–∞–Ω {report['created']}\nüí¨ {report['text']}\n---"
                reports_str_list.append(reports_str)
                reports_str_joined = "\n".join(reports_str_list)
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤:\n\n" + reports_str_joined + f"\n\n‚ùì –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç–∏—Ç—å ¬´ID¬ª ¬´—Ç–µ–∫—Å—Ç¬ª")
        else:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
    else:
        return
    

@al.message(text=["–û—Ç–≤–µ—Ç–∏—Ç—å", "–û—Ç–≤–µ—Ç–∏—Ç—å <id> <text>"])
async def reports(message: Message, id=None, text=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info['status'] in ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–í–ª–∞–¥–µ–ª–µ—Ü', '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π']:
        if id and text is not None:
            try:
                vuser = await get_user_by_report_id(report_id=id)
            except:
                 await message.answer("–¢–∞–∫–æ–≥–æ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            finally:
                if vuser is None:
                    await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ä–µ–ø–æ—Ä—Ç–∞.")
                    return

            user_nickname = user_info.get('nickname', f"id{user_info['id']}")
            vuser_nickname = vuser.get('nickname', f"id{vuser['id']}")

            answer_message = f"@id{user_info['id']}({user_nickname}), –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ä–µ–ø–æ—Ä—Ç @id{vuser['id']}({vuser_nickname}) ‚úÖ"
            await message.answer(answer_message)

            text_to_send = f"@id{vuser['id']}({vuser_nickname}), –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_nickname}) –æ—Ç–≤–µ—Ç–∏–ª –≤–∞–º:\n\nüí¨ {text}"
            await bot.api.messages.send(user_id=vuser['id'], random_id=0, message=text_to_send)
            admins = await get_admins()
            admin_message = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id{user_info['id']}({user_nickname}) –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ä–µ–ø–æ—Ä—Ç @id{vuser['id']}({vuser_nickname}) ‚úÖ"
            for admin in admins:
                await bot.api.messages.send(admin['id'], random_id=0, message=admin_message)
            await close_report(id=id)
        else:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç–∏—Ç—å ¬´ID¬ª ¬´—Ç–µ–∫—Å—Ç¬ª ‚ùå")
    else:
        return