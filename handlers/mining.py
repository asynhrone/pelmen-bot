from vkbottle.bot import BotLabeler, Message, Bot
from functions import (get_user, insert_user, update_mining_shop,
                       bitcoin_mine, update_user_mining_time)
from config import *
import random
from datetime import datetime, timedelta

ml = BotLabeler()
ml.vbml_ignore_case = True
bot = Bot(token=token)

@ml.message(text='–ú–∞–π–Ω–∏–Ω–≥')
async def mining_page(message: Message):
    global BITCOIN_COST
    photo_id = 'photo-222672748_456239020_d3be635b2f96c5b846'
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if user_info['farm-count'] == 0 or user_info['farm-count'] is None:
            display_redirect = "üîã –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–∏–≥–æ–≤—ã—Ö —Ñ–µ—Ä–º. –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ¬´–§–µ—Ä–º—ã¬ª."
        else:
            farm_type = farm_name.get(user_info['farm-type']) 
            gen_income = int(farm_income[user_info['farm-type']]) * user_info['farm-count'] #general income
            display_redirect = (f"\nüîã –§–µ—Ä–º–∞ {farm_type} ({user_info['farm-count']:,} —à—Ç.)".replace(',', '.')+
                                f"\nüí∏ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {gen_income:,}‚Çø".replace(',', '.')+
                                "\n\n‚≠ê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∞–π–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ ¬´–ú–∞–π–Ω–∏—Ç—å¬ª.")
        
        new_cost = random.randint(1900, 3300)
        display_cost = "üìà " if new_cost > BITCOIN_COST else "üìâ "
        BITCOIN_COST = new_cost
        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –º–∞–π–Ω–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:"
                             f"\n\n{display_redirect}"
                             f"\n\n{display_cost} –ö—É—Ä—Å: 1‚Çø = {new_cost:,}$".replace(',', '.'), attachment=photo_id)
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ml.message(text=['–§–µ—Ä–º—ã', '–§–µ—Ä–º—ã <number:int> <count:int>'])
async def mining_shop(message: Message, number=None, count=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    farm_name = {1: "ASICminer 8 Nano Pro", 2: "Ebit E9 Plus", 3: "Miner 741", 4: "DragonMint T1"}
    if user_info:
        if number is not None and count is not None:
            price = farm_prices.get(number, 0) * count
            price = int(price)

            if int(number) < 1 or int(number) > 4:
                return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–µ—Ä–º ‚ùå")
            if int(count) <= 0:
                return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º ‚ùå") 
            if user_info['farm-type'] is None or user_info['farm-type'] == 0:
                if int(count) > 3000:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–æ–ª—å—à–µ 3000 —Ñ–µ—Ä–º‚ùå")
                else:
                    await update_mining_shop(user_id=user_info['id'], number=number, balance=user_info['balance'], price=price, count=count)
                    return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –∫—É–ø–∏–ª–∏ {count} —Ñ–µ—Ä–º {farm_name.get(number)}")
            else:
                if (user_info['balance']) < price:
                    return await message.answer(
                        f"@id{user_info['id']}({user_info['nickname']}), —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {count} {farm_name.get(number, '—Ñ–µ—Ä–º')} ‚ùå"
                    )
                if user_info['farm-type'] != number: 
                    return await message.answer(
                        f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —Ñ–µ—Ä–º—É —Ç–∏–ø–∞ {farm_name.get(user_info['farm-type'])}, –ø–æ–∫—É–ø–∫–∞ —Ñ–µ—Ä–º –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ ‚ùå"
                    )
                else:
                    if int(count) > 3000:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–æ–ª—å—à–µ 3000 —Ñ–µ—Ä–º‚ùå")
                    elif user_info['farm-count'] + count > 3000:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ 3000 —Ñ–µ—Ä–º‚ùå")
                    else:
                        await update_mining_shop(user_id=user_info['id'], number=number, balance=user_info['balance'], price=price, count=int(count))
                        return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –∫—É–ø–∏–ª–∏ {count} —Ñ–µ—Ä–º {farm_name.get(number)}")
        else:
            return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –º–∞–π–Ω–∏–Ω–≥-–º–∞–≥–∞–∑–∏–Ω:"
                                "\n\n1. üîã ASICminer 8 Nano Pro (1‚Çø) - 3.000.000$"
                                "\n2. üîã Ebit E9 Plus (50‚Çø) - 7.000.000.000$"
                                "\n3. üîã Miner 741 (1000‚Çø) - 120.000.000.000.000$"
                                "\n4. üí† DragonMint T1 (3000‚Çø) - 300.000.000.000.000$"
                                "\n\nüõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –§–µ—Ä–º—ã ¬´1-4¬ª ¬´–∫–æ–ª-–≤–æ¬ª")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ml.message(text='–ú–∞–π–Ω–∏—Ç—å')
async def mining(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if user_info['farm-count'] == 0:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ ‚ùå")
        else:
            now = datetime.now()
            if user_info['last_mining_time'] is None:
                bitcoin_earned = int(user_info['farm-count']) * int(farm_income[user_info['farm-type']])
                await update_user_mining_time(user_id=user_info['id'], last_mining_time=now.isoformat())
                await bitcoin_mine(user_id=user_info['id'], bitcoin_earned=bitcoin_earned)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {bitcoin_earned:,}‚Çø".replace(',', '.'))
            else:   
                if now - user_info['last_mining_time'] < timedelta(hours=8):
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –º–∞–π–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤ ‚ùå")
                else:
                    bitcoin_earned = int(user_info['farm-count']) * int(farm_income[user_info['farm-type']])
                    await update_user_mining_time(user_id=user_info['id'], last_mining_time=now.isoformat())
                    await bitcoin_mine(user_id=user_info['id'], bitcoin_earned=bitcoin_earned)
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {bitcoin_earned:,}‚Çø".replace(',', '.'))
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        await message.answer(successfull_registration)
