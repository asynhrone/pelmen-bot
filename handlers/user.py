from vkbottle.bot import BotLabeler, Message, Bot
from functions import *
from config import *
import random, asyncio
from datetime import datetime, timedelta

ul = BotLabeler()
ul.vbml_ignore_case = True
bot = Bot(token=token)

@ul.message(text='–•–µ–ª–ø')
async def help(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info: 
        return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:"
                                    "\n\nüìö –û—Å–Ω–æ–≤–Ω–æ–µ:"
                                    "\n„Ö§üìô –ü—Ä–æ—Ñ–∏–ª—å"
                                    "\n„Ö§üìä –¢–æ–ø"
                                    "\n„Ö§‚úèÔ∏è –ù–∏–∫"
                                    "\n„Ö§üîñ –ü—Ä–æ–¥–∞—Ç—å [–ü—Ä–µ–¥–º–µ—Ç]"
                                    "\n„Ö§üõí –ú–∞–≥–∞–∑–∏–Ω"
                                    "\n„Ö§üíµ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ [ID]  [–°—É–º–º–∞]"
                                    "\n\nüí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫:"
                                    "\n„Ö§üéÅ –ë–æ–Ω—É—Å"
                                    "\n„Ö§‚õ±Ô∏è –†—ã–±–∞–ª–∫–∞"
                                    "\n„Ö§üíΩ –ú–∞–π–Ω–∏–Ω–≥"
                                    "\n„Ö§üöñ –¢–∞–∫—Å–æ–≤–∞—Ç—å"
                                    "\n\nüåà –†–∞–≤–∑–ª–µ—á–µ–Ω–∏—è:"
                                    "\n„Ö§üèÅ –ì–æ–Ω–∫–∞"
                                    "\n„Ö§üé∞ –ö–∞–∑–∏–Ω–æ [–°—Ç–∞–≤–∫–∞]"
                                    "\n\n‚ùì –†–µ–ø–æ—Ä—Ç [–¢–µ–∫—Å—Ç]")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)


@ul.message(text=['–ü—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ'])
async def profile(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if not user_info:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    
    farm_type = farm_name.get(user_info['farm-type']) 
    display_status = f"üî• {user_info['status']}" if user_info['status'] != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" else ''
    display_status = display_status.strip() 
    exp = user_info['exp'] if user_info['exp'] is not None else 0
    cups = user_info['cups'] if user_info['cups'] is not None else 0
    bank_balance = user_info['bank_balance'] if user_info['bank_balance'] is not None else 0
    display_property = "\n\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:"

    if 'flat' in user_info and user_info['flat'] is not None:
        flat_description = flats.get(str(user_info['flat']), '')
        if flat_description:  
            display_property += f"\n„Ö§üè¨ {flat_description}"

    if 'farm-count' in user_info and user_info['farm-count']:
        display_property += f"\n„Ö§üîã –§–µ—Ä–º–∞: {farm_type} ({user_info['farm-count']:,} —à—Ç.)".replace(',', '.')

    if 'car' in user_info and user_info['car'] is not None:
        car_description = cars.get(str(user_info['car']), '')
        if car_description:  
            display_property += f"\n„Ö§üöó {car_description}"

    if 'yacht' in user_info and user_info['yacht'] is not None:
        yacht_description = yachts.get(str(user_info['yacht']), '')
        if yacht_description:  
            display_property += f"\n„Ö§üõ•Ô∏è {yacht_description}"

    if display_property.strip() == "üîë –ò–º—É—â–µ—Å—Ç–≤–æ:":
        display_property += '\n„Ö§„Ö§–ü—É—Å—Ç–æ'

    profile_message = (
        f"@id{user_info['id']}({user_info['nickname']}), –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:"
        f"\n\nüîé ID: {user_info['bot_id']}" +
        (f"\n{display_status}" if display_status else "") +
        f"\nüèÜ {cups:,} –ö—É–±–∫–æ–≤".replace(',', '.') +
        f"\nüí∏ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:,}$".replace(',', '.') +
        f"\nüí≥ –í –±–∞–Ω–∫–µ: {bank_balance:,}$".replace(',', '.') +
        f"\n‚≠ê {exp:,} EXP".replace(',', '.') +
        f"\nüíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user_info['bitcoin']:,}‚Çø".replace(',', '.') +
        display_property 
    )

    attachment = await generate_profile_image(flat=user_info['flat'], car=user_info['car'])
    return await message.answer(profile_message, attachment=attachment)
    

@ul.message(text="–ë–∞–ª–∞–Ω—Å")
async def balance(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –±–∞–ª–∞–Ω—Å:"
                             f"\n\nüí∏ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:,}$".replace(',', '.') +
                             f"\nüíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user_info['bitcoin']:,}‚Çø".replace(',', '.'))
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text=['–ù–∏–∫', '–ù–∏–∫ <newnickname>'])
async def changenickname(message: Message, newnickname=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if not newnickname:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∏–∫ ¬´–Ω–æ–≤—ã–π –Ω–∏–∫¬ª")
        else:
            if user_info['status'] not in ["–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü—Ü"] and len(newnickname) > 128:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 128 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
            elif user_info['status'] not in ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü—Ü"] and len(newnickname) > 128:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            elif user_info['status'] not in ["ELITE", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü—Ü"] and len(newnickname) > 64:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ ELITE-—Å—Ç–∞—Ç—É—Å.")
            elif user_info['status'] not in ["VIP", "ELITE", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü—Ü"] and len(newnickname) > 32:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å.")
            elif len(newnickname) < 3:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
            else:
                random_phrase = random.choice(list(phrases.values()))
                await insert_newnickname(user_id=user[0].id, newnickname=newnickname)
                return await message.answer(f"@id{user_info['id']}({newnickname}), " + random_phrase)
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

async def get_emoji_for_number(number):
    return ''.join([emoji_dict.get(digit, '') for digit in str(number)])

@ul.message(text=["–¢–æ–ø", "–¢–æ–ø <type>"])
async def top(message: Message, type=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if type in ["–±–∞–ª–∞–Ω—Å", "–ø–æ –±–∞–ª–∞–Ω—Å—É"]:
            top_users = await get_top_users_by_them(type='balance')
            user_place = await get_user_place_in_top(user_info['id'], top_users)
            top_users_str = "\n".join([f"{await get_emoji_for_number(i+1)} @id{user[0]}({user[1]}) | ${format_number(user[2])}" for i, user in enumerate(top_users)])
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n{top_users_str}\n\n‚û° @id{user_info['id']}({user_info['nickname']}) | ${format_number(user_info['balance'])}")
        elif type in ["—É–¥–æ—á–∫–∞", "–ø–æ —É–¥–æ—á–∫–µ"]:
            top_users = await get_top_users_by_them(type='fishing_rob_level')
            user_place = await get_user_place_in_top(user_info['id'], top_users)
            top_users_str = "\n".join([f"{await get_emoji_for_number(i+1)} @id{user[0]}({user[1]}) | {user[2]:,} LVL".replace(',', '.') for i, user in enumerate(top_users)])
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é —É–¥–æ—á–∫–∏:\n\n{top_users_str}\n\n‚û° @id{user_info['id']}({user_info['nickname']}) | {user_info['fishing_rob_level']} LVL")
        else:
            photo_id = "photo-222672748_456239024_acb7a0d480f3dec3fe"
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø—ã:"
                    "\n\n1. –ü–æ –±–∞–ª–∞–Ω—Å—É (–±–∞–ª–∞–Ω—Å)"
                    "\n2. –ü–æ —É–¥–æ—á–∫–µ (—É–¥–æ—á–∫–∞)"
                    "\n\n‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–æ–ø ¬´–±–∞–ª–∞–Ω—Å¬ª", attachment=photo_id)
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)


@ul.message(text="–ë–æ–Ω—É—Å")
async def bonus(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    price = random.randint(100000, 10000000)
    exp = random.randint(1000, 5000)
    if user_info:
        now = datetime.now()
        if user_info['last_bonus_time'] is None:
            exp_count = user_info['exp']
            await bonus_get(user_id=user_info['id'], price=price, price_exp=exp, exp_count=exp_count)
            await update_user_bonus_time(user_id=user_info['id'], last_bonus_time=now.isoformat())
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–µ—Ä–∂–∏—Ç–µ –±–æ–Ω—É—Å {price:,}$ –∏ {exp:,} EXP üòé".replace(',', '.'))
        else:   
            if now - user_info['last_bonus_time'] < timedelta(hours=12):
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—à—å —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ ‚ùå")
            else:
                exp_count = user_info['exp']
                await bonus_get(user_id=user_info['id'], price=price, price_exp=exp, exp_count=exp_count)
                await update_user_bonus_time(user_id=user_info['id'], last_bonus_time=now.isoformat())
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–µ—Ä–∂–∏—Ç–µ –±–æ–Ω—É—Å {price:,}$ –∏ {exp:,} EXP üòé".replace(',', '.'))
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        await message.answer(successfull_registration)

async def edit_message_with_correct_id(bot_api, peer_id, sent_message, new_text):
    message_key = 'conversation_message_id' if hasattr(sent_message, 'conversation_message_id') else 'message_id'
    await bot_api.messages.edit(
        peer_id=peer_id,
        message=new_text,
        **{message_key: getattr(sent_message, message_key)}
    )

@ul.message(text="–ì–æ–Ω–∫–∞")
async def race(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    now = datetime.now()
    if user_info:
        if user_info['car'] is None or user_info['car'] == 0:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã ‚ùå")
        else:
            if user_info['last_race_time'] is None or now - user_info['last_race_time'] > timedelta(minutes=20):
                users_with_cars = await get_users_by_them(type='car')
                opponent = await get_random_user(users=users_with_cars, excluded_user_id=user_info['id'])
                sent_message = await message.answer(
                    f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–∞—á–∞–ª–∏ –≥–æ–Ω–∫—É –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) üèÅ\n\n‚åõ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
                for i in reversed(range(-1, 2)):
                    await asyncio.sleep(1)

                if int(user_info['car']) > int(opponent['car']):
                    result_text = "ü•á –í—ã –ø—Ä–∏—à–ª–∏ –∫ —Ñ–∏–Ω–∏—à—É –ø–µ—Ä–≤—ã–º! +100 üèÜ"
                elif int(user_info['car']) < int(opponent['car']):
                    result_text = "ü•à –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏—à–µ–ª –∫ —Ñ–∏–Ω–∏—à—É –ø–µ—Ä–≤—ã–º! -100 üèÜ"
                else:
                    result_text = "ü•à –í—ã —Å–≤–µ–ª–∏ —Å—á–µ—Ç –≤ –Ω–∏—á—å—é! +0 üèÜ"

                new_text = f"@id{user_info['id']}({user_info['nickname']}), –≥–æ–Ω–∫–∞ –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üèÅ\n\n {result_text}"
                await edit_message_with_correct_id(bot.api, sent_message.peer_id, sent_message, new_text)

                cups_change = 100 if user_info['car'] > opponent['car'] else -100 if user_info['car'] < opponent['car'] else 0
                await race_update_cooldown(user_id=user_info['id'], new_race_time=now.isoformat())
                await race_update_cups(user_id=user_info['id'], count=cups_change, cups=user_info['cups'], operation="+")

                sticker_id = 83931 if user_info['car'] > opponent['car'] else 83936 if user_info['car'] < opponent['car'] else 79410
                await message.answer(sticker_id=sticker_id)
            else:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç ‚ùå")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name)
        await message.answer(successfull_registration)


@ul.message(text=["–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ <id> <count>"])
async def transfer(message: Message, id=None, count=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if id is not None:
            if count is not None:
                opponent = await bot_get_user(user_id=id)
                if opponent:
                    count = await converter(count)
                    if count > user_info['balance']:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
                    elif user_info['status'] not in ["–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"] and count > 200000000000000:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ 200 —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é‚ùå")
                    elif user_info['status'] not in ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"] and count > 100000000000000:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ 100 —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    elif user_info['status'] not in ["ELITE", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"] and count > 50000000000000:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ 50 —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ ELITE-—Å—Ç–∞—Ç—É—Å.")
                    elif user_info['status'] not in ["VIP", "ELITE", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"] and count > 20000000000000:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ 20 —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å.")
                    else:
                        await transfer_money(user_id=user_info['id'], operation='-', count=count)
                        await transfer_money(user_id=opponent['id'], operation='+', count=count)
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ @id{opponent['id']}({opponent['nickname']}) {count:,}$ ‚úÖ".replace(',', '.'))
                        message = f"@id{user_info['id']}({user_info['nickname']}) –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º {count:,}$ üòé".replace(',', '.')
                        await bot.api.messages.send(user_id=opponent['id'], random_id=0, message=message)
                        await bot.api.messages.send(user_id=opponent['id'], random_id=0, sticker_id=21099)
                else:
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå")
            else:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ¬´ID¬ª ¬´—Å—É–º–º–∞¬ª‚ùå")
        else:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ¬´ID¬ª ¬´—Å—É–º–º–∞¬ª‚ùå")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name)
        await message.answer(successfull_registration)


@ul.message(text="–î–æ–Ω–∞—Ç")
async def donate(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        attachment = "photo-222672748_456239129_a14a19fed3bd49c346"
        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–æ–Ω–∞—Ç-–º–∞–≥–∞–∑–∏–Ω:"
                             "\n\nüíé –°—Ç–∞—Ç—É—Å ¬´VIP¬ª | 49‚ÇΩ (–°–ö–ò–î–ö–ê -50%)"
                             "\n„Ö§- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ ¬´üî• VIP¬ª"
                             "\n„Ö§- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –¥–æ $10 —Ç—Ä–ª–¥."
                             "\n„Ö§- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–∫–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω $10 —Ç—Ä–ª–¥."
                             "\n„Ö§- –î–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤."
                             "\n„Ö§- –õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ $50 —Ç—Ä–ª–Ω."
                             "\n\nüíé –°—Ç–∞—Ç—É—Å ¬´ELITE¬ª | 99‚ÇΩ (–°–ö–ò–î–ö–ê -50%)"
                             "\n„Ö§- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ ¬´üî• ELITE¬ª"
                             "\n„Ö§- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –¥–æ $25 —Ç—Ä–ª–¥."
                             "\n„Ö§- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–∫–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω $25 —Ç—Ä–ª–¥."
                             "\n„Ö§- –î–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤."
                             "\n„Ö§- –õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ $100 —Ç—Ä–ª–Ω."
                             "\n\nüíé –°—Ç–∞—Ç—É—Å ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª | 249‚ÇΩ (–°–ö–ò–î–ö–ê -50%)"
                             "\n„Ö§- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ ¬´üî• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª"
                             "\n„Ö§- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –¥–æ $50 —Ç—Ä–ª–¥."
                             "\n„Ö§- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–∫–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω $50 —Ç—Ä–ª–¥."
                             "\n„Ö§- –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ ¬´–†–µ–ø–æ—Ä—Ç—ã¬ª"
                             "\n„Ö§- –î–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤."
                             "\n„Ö§- –õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ $200 —Ç—Ä–ª–Ω."
                             "\n\nüí∏ –í–∞–ª—é—Ç–∞"
                             "\n„Ö§- $1 —Ç—Ä–ª–Ω. | 1‚ÇΩ (–°–ö–ò–î–ö–ê -50%)"
                             "\n„Ö§- $100 —Ç—Ä–ª–Ω. | 49‚ÇΩ (–°–ö–ò–î–ö–ê -50%)"
                             "\n\nüéÆ –î–ª—è –ø–æ–∫—É–ø–∫–∏: https://vk.cc/ctFXZW"
                             f"\nüé≤ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {user_info['bot_id']}")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name)
        await message.answer(successfull_registration)


@ul.message(text=["–†–µ–ø–æ—Ä—Ç", "–†–µ–ø–æ—Ä—Ç <text>"])
async def report(message: Message, text=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    now = datetime.now()
    if user_info:
        rep = await get_report(user_id=user_info['id'])
        if rep:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –í—ã —É–∂–µ –ø–∏—Å–∞–ª–∏ –≤ —Ä–µ–ø–æ—Ä—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ ‚ùå")
        else:
            if text is not None:
                await register_new_report(from_id=user_info['id'], text=text, created=now.isoformat())
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ! ‚ù§")
                admins = await get_admins()
                report = await get_report(user_id=user_info['id'])
                admin_message = f"–†–µ–ø–æ—Ä—Ç #{report['id']}\n\n‚ùó –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –æ—Ç @id{user_info['id']}({user_info['nickname']}) \nüí¨ {text}"
                for admin in admins:
                    await bot.api.messages.send(admin['id'], random_id=0, message=admin_message)
            else:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –†–µ–ø–æ—Ä—Ç ¬´—Ç–µ–∫—Å—Ç¬ª ")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name)
        await message.answer(successfull_registration)


@ul.message(text=["–ë–∞–Ω–∫", "–ë–∞–Ω–∫ <type> <count>"])
async def bank(message: Message, type=None, count=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if not user_info:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    
    limit = limits.get(user_info['status'])
    if type and count is not None:
        if type in ["–ü–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å"]:
            if count == "–≤—Å–µ":
                count = user_info['balance']
                await plus_bank_balance(user_id=user_info['id'], count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ –±–∞–∫–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç {count:,}$ ü§ë".replace(',', '.'))
            else:
                count = await converter(count)
                try:
                    int(count)
                except:
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ ‚ùå")
                if int(count) > int(user_info['balance']):
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –±–æ–ª—å—à–µ, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å ‚ùå")
                elif (int(count) + int(user_info['bank_balance'])) > limit:
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç ‚ùå")
                else:
                    await plus_bank_balance(user_id=user_info['id'], count=count)
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ –±–∞–∫–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç {count:,}$ ü§ë".replace(',', '.'))
        if type in ["–°–Ω—è—Ç—å", "—Å–Ω—è—Ç—å"]:
            if count == "–≤—Å–µ":
                count = user_info['bank_balance']
                await minus_bank_balance(user_id=user_info['id'], count=count)
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —Å–Ω—è–ª–∏ —Å –±–∞–∫–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ {count:,}$ üëç".replace(',', '.'))
            else:
                count = await converter(count)
                try:
                    int(count)
                except:
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ ‚ùå")
                if int(count) > int(user_info['bank_balance']):
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –±–æ–ª—å—à–µ, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å ‚ùå")
                else:
                    await minus_bank_balance(user_id=user_info['id'], count=count)
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã —Å–Ω—è–ª–∏ —Å –±–∞–∫–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ {count:,}$ üëç".replace(',', '.'))
    else:
        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –±–∞–Ω–∫:" +
                            f"\n\n¬´–°—á–µ—Ç ‚Ññ{user_info['id']}¬ª" +
                            f"\nüí∞ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: {user_info['bank_balance']:,}$".replace(',', '.') +
                            f"\n‚ùó –õ–∏–º–∏—Ç: {limit:,}$".replace(',', '.') +
                            "\n\nüí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: –ë–∞–Ω–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å ¬´—Å—É–º–º–∞¬ª"
                            "\nüí∑ –î–ª—è —Å–Ω—è—Ç–∏—è: –ë–∞–Ω–∫ —Å–Ω—è—Ç—å ¬´—Å—É–º–º–∞¬ª"
                            "\nü§ù –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ¬´ID¬ª ¬´—Å—É–º–º–∞¬ª")
        await message.answer(sticker_id=79403)