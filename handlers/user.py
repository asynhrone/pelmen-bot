from vkbottle.bot import BotLabeler, Message, Bot
from functions import (get_user, insert_user, insert_newnickname, get_top_users_by_them, 
                       format_number, get_user_place_in_top, update_user_bonus_time, bonus_get)
from config import successfull_registration, token, phrases, emoji_dict
from vkbottle import Keyboard, KeyboardButtonColor, Text
import random
from datetime import datetime, timedelta

ul = BotLabeler()
ul.vbml_ignore_case = True
bot = Bot(token=token)

@ul.message(text='–ü–æ–º–æ—â—å')
async def help(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info: 
        return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:"
                                    "\n\nüìö –û—Å–Ω–æ–≤–Ω–æ–µ:"
                                    "\n„Ö§üìô –ü—Ä–æ—Ñ–∏–ª—å"
                                    "\n„Ö§üìä –¢–æ–ø [–ü–∞—Ä–∞–º–µ—Ç—Ä]"
                                    "\n„Ö§‚úèÔ∏è –ù–∏–∫ [–ù–æ–≤—ã–π –Ω–∏–∫]"
                                    "\n„Ö§üîñ –ü—Ä–æ–¥–∞—Ç—å [–ü—Ä–µ–¥–º–µ—Ç]"
                                    "\n„Ö§üõí –ú–∞–≥–∞–∑–∏–Ω"
                                    "\n\nüí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫:"
                                    "\n„Ö§üéÅ –ë–æ–Ω—É—Å"
                                    "\n„Ö§‚õ±Ô∏è –†—ã–±–∞–ª–∫–∞"
                                    "\n„Ö§üíΩ –ú–∞–π–Ω–∏–Ω–≥"
                                    "\n\nüåà –†–∞–≤–∑–ª–µ—á–µ–Ω–∏—è:"
                                    "\n„Ö§üé∞ –ö–∞–∑–∏–Ω–æ [–°—Ç–∞–≤–∫–∞]")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text=['–ü—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ'])
async def profile(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        farm_name = {1: "ASICminer 8 Nano Pro", 2: "Ebit E9 Plus", 3: "Miner 741", 4: "DragonMint T1"}
        farm_type = farm_name.get(user_info['farm-type']) 
        display_status = f"üî• {user_info['status']}" if user_info['status'] != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" else ''
        display_status = display_status.strip() 
        exp = user_info['exp'] if user_info['exp'] is not None else 0

        display_property = "\n\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:"
        if 'flat' in user_info and user_info['flat'] is not None:
            flat = {"1": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ö—Ä—É—â–µ–≤–∫–µ", "2": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞", "3": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –æ–∫—Ä–∞–∏–Ω–µ –ü–∏—Ç–µ—Ä–∞",
                    "4": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã", "5": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ", "6": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å–µ—Ä–¥—Ü–µ –ü–µ–∫–∏–Ω–∞",
                    "7": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ Odeon Tower", "8": "–°–∞—Ä–∞–π"}
            flat_description = flat.get(str(user_info['flat']), '')
            if flat_description:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                display_property += f"\n„Ö§üè¨ –ö–≤–∞—Ä—Ç–∏—Ä–∞: {flat_description}"

        if 'farm-count' in user_info and user_info['farm-count']:
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `farm_type` –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–¥–µ-—Ç–æ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ.
            display_property += f"\n„Ö§üîã –§–µ—Ä–º–∞: {farm_type} ({user_info['farm-count']:,} —à—Ç.)".replace(',', '.')

        if 'car' in user_info and user_info['car'] is not None:
            car = {"1": "Nissan Pathfinder", "2": "Mazda 6", "3": "Mercedes-Benz CLS",
                    "4": "Audi R8", "5": "Ferrari 458 Italia", "6": "Mercedes-Benz Pullman",
                    "7": "Rolls-Royce Sweptail", "8": "Bugatti Bolide", "9": "Aurus Senat Limousine", "10": "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —É–Ω–∏—Ç–∞–∑ üå≤"}
            car_description = car.get(str(user_info['car']), '')
            if car_description:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                display_property += f"\n„Ö§üöó –ú–∞—à–∏–Ω–∞: {car_description}"

        if 'yacht' in user_info and user_info['yacht'] is not None:
            yacht = {"1": "Seven Seas", "2": "Octopus", "3": "Lady Moura", "4": "Al Mirqab", 
                      "5": "Eclipse", "6": "Histoty SUPREMEE", "7": "–ë–∞—Ä–∞–Ω–∫–∞"}
            yacht_description = yacht.get(str(user_info['yacht']), '')
            if yacht_description:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                display_property += f"\n„Ö§üõ•Ô∏è –Ø—Ö—Ç–∞: {yacht_description}"

        if display_property == "\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:":
            display_property += '\n„Ö§„Ö§–ü—É—Å—Ç–æ'

        profile_message = (
            f"@id{user_info['id']}({user_info['nickname']}), –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:"
            f"\n\nüîé ID: {user_info['bot_id']}" +
            (f"\n{display_status}" if display_status else "") +
            f"\nüí∏ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:,}$".replace(',', '.') +
            f"\n‚≠ê {exp:,} EXP".replace(',', '.') +
            f"\nüíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user_info['bitcoin']:,}‚Çø".replace(',', '.') +
            display_property
        )
        keyboard = Keyboard(one_time=False, inline=True)
        keyboard.add(Text("–ü–æ–º–æ—â—å"), color=KeyboardButtonColor.POSITIVE)
        return await message.answer(profile_message, keyboard=keyboard.get_json())

    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text="–ë–∞–ª–∞–Ω—Å")
async def balance(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –±–∞–ª–∞–Ω—Å:"
                             f"\n\nüí∏ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:,}$".replace(',', '.') +
                             f"\nüíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user_info['bitcoin']:,}‚Çø".replace(',', '.'))
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text=['–ù–∏–∫', '–ù–∏–∫ <newnickname>'])
async def changenickname(message: Message, newnickname=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if not newnickname:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∏–∫ ¬´–Ω–æ–≤—ã–π –Ω–∏–∫¬ª")
        else:
            if len(newnickname) > 32:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
            elif len(newnickname) < 3:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
            else:
                random_phrase = random.choice(list(phrases.values()))
                await insert_newnickname(user_id=user[0].id, newnickname=newnickname)
                return await message.answer(f"@id{user_info['id']}({newnickname}), " + random_phrase)
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text=["–¢–æ–ø", "–¢–æ–ø <type>"])
async def top(message: Message, type=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if type in ["–±–∞–ª–∞–Ω—Å", "–ø–æ –±–∞–ª–∞–Ω—Å—É"]:
            top_users = await get_top_users_by_them(type='balance')
            user_place = await get_user_place_in_top(user_info['id'], top_users)
            top_users_str = "\n".join([f"{emoji_dict[str(i+1)]} @id{user[0]}({user[1]}) | ${format_number(user[2])}" for i, user in enumerate(top_users)])
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n{top_users_str}\n\n‚û°{emoji_dict[str(user_place)]} @id{user_info['id']}({user_info['nickname']}) | ${format_number(user_info['balance'])}")
        elif type in ["—É–¥–æ—á–∫–∞", "–ø–æ —É–¥–æ—á–∫–µ"]:
            top_users = await get_top_users_by_them(type='fishing_rob_level')
            user_place = await get_user_place_in_top(user_info['id'], top_users)
            top_users_str = "\n".join([f"{emoji_dict[str(i+1)]} @id{user[0]}({user[1]}) | LVL {format_number(user[2])}" for i, user in enumerate(top_users)])
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é —É–¥–æ—á–∫–∏:\n\n{top_users_str}\n\n‚û°{emoji_dict[str(user_place)]} @id{user_info['id']}({user_info['nickname']}) | LVL {format_number(user_info['fishing_rob_level'])}")
        else:
            photo_id = "photo-222672748_456239024_acb7a0d480f3dec3fe"
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø—ã:"
                    "\n\n1. –ü–æ –±–∞–ª–∞–Ω—Å—É (–±–∞–ª–∞–Ω—Å)"
                    "\n2. –ü–æ —É–¥–æ—á–∫–µ (—É–¥–æ—á–∫–∞)"
                    "\n\n‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–æ–ø ¬´–±–∞–ª–∞–Ω—Å¬ª", attachment=photo_id)
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)


@ul.message(text="–ë–æ–Ω—É—Å")
async def bonus(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    price = random.randint(1000, 100000)
    exp = random.randint(100, 500)
    if user_info:
        now = datetime.now()
        if user_info['last_bonus_time'] is None:
            exp_count = user_info['exp']
            await bonus_get(user_id=user_info['id'], price=price, price_exp=exp, exp_count=exp_count)
            await update_user_bonus_time(user_id=user_info['id'], last_bonus_time=now.isoformat())
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–µ—Ä–∂–∏—Ç–µ –±–æ–Ω—É—Å {price:,}$ –∏ {exp:,} EXP üòé".replace(',', '.'))
        else:   
            if now - user_info['last_bonus_time'] < timedelta(hours=24):
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—à—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ ‚ùå")
            else:
                exp_count = user_info['exp']
                await bonus_get(user_id=user_info['id'], price=price, price_exp=exp, exp_count=exp_count)
                await update_user_bonus_time(user_id=user_info['id'], last_bonus_time=now.isoformat())
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–µ—Ä–∂–∏—Ç–µ –±–æ–Ω—É—Å {price:,}$ –∏ {exp:,} EXP üòé".replace(',', '.'))
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        await message.answer(successfull_registration)
