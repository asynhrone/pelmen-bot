from vkbottle.bot import BotLabeler, Message, Bot
from functions import (get_user, insert_user, insert_newnickname, get_top_users_by_them, 
                       format_number, get_user_place_in_top, update_user_bonus_time, 
                       bonus_get, race_update_cups, race_update_cooldown, get_users_by_them,
                       get_random_user, generate_profile_image, bot_get_user,
                       converter, transfer_money)
from config import successfull_registration, token, phrases, emoji_dict
import random, asyncio
from datetime import datetime, timedelta

ul = BotLabeler()
ul.vbml_ignore_case = True
bot = Bot(token=token)

@ul.message(text='–ü–æ–º–æ—â—å')
async def help(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info: 
        return await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:"
                                    "\n\nüìö –û—Å–Ω–æ–≤–Ω–æ–µ:"
                                    "\n„Ö§üìô –ü—Ä–æ—Ñ–∏–ª—å"
                                    "\n„Ö§üìä –¢–æ–ø"
                                    "\n„Ö§‚úèÔ∏è –ù–∏–∫"
                                    "\n„Ö§üîñ –ü—Ä–æ–¥–∞—Ç—å [–ü—Ä–µ–¥–º–µ—Ç]"
                                    "\n„Ö§üõí –ú–∞–≥–∞–∑–∏–Ω"
                                    "\n„Ö§üíµ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ [ID]  [–°—É–º–º–∞]"
                                    "\n\nüí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫:"
                                    "\n„Ö§üéÅ –ë–æ–Ω—É—Å"
                                    "\n„Ö§‚õ±Ô∏è –†—ã–±–∞–ª–∫–∞"
                                    "\n„Ö§üíΩ –ú–∞–π–Ω–∏–Ω–≥"
                                    "\n„Ö§üöñ –¢–∞–∫—Å–æ–≤–∞—Ç—å"
                                    "\n\nüåà –†–∞–≤–∑–ª–µ—á–µ–Ω–∏—è:"
                                    "\n„Ö§üèÅ –ì–æ–Ω–∫–∞"
                                    "\n„Ö§üé∞ –ö–∞–∑–∏–Ω–æ [–°—Ç–∞–≤–∫–∞]")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text=['–ü—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ'])
async def profile(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        farm_name = {1: "ASICminer 8 Nano Pro", 2: "Ebit E9 Plus", 3: "Miner 741", 4: "DragonMint T1"}
        farm_type = farm_name.get(user_info['farm-type']) 
        display_status = f"üî• {user_info['status']}" if user_info['status'] != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" else ''
        display_status = display_status.strip() 
        exp = user_info['exp'] if user_info['exp'] is not None else 0

        display_property = "\n\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:"
        if 'flat' in user_info and user_info['flat'] is not None:
            flat = {"1": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ö—Ä—É—â–µ–≤–∫–µ", "2": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞", "3": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –æ–∫—Ä–∞–∏–Ω–µ –ü–∏—Ç–µ—Ä–∞",
                    "4": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã", "5": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ", "6": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å–µ—Ä–¥—Ü–µ –ü–µ–∫–∏–Ω–∞",
                    "7": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ Odeon Tower", "8": "–°–∞—Ä–∞–π"}
            flat_description = flat.get(str(user_info['flat']), '')
            if flat_description:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                display_property += f"\n„Ö§üè¨ {flat_description}"

        if 'farm-count' in user_info and user_info['farm-count']:
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `farm_type` –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–¥–µ-—Ç–æ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ.
            display_property += f"\n„Ö§üîã –§–µ—Ä–º–∞: {farm_type} ({user_info['farm-count']:,} —à—Ç.)".replace(',', '.')

        if 'car' in user_info and user_info['car'] is not None:
            car = {"1": "Nissan Pathfinder", "2": "Mazda 6", "3": "Mercedes-Benz CLS",
                    "4": "Audi R8", "5": "Ferrari 458 Italia", "6": "Mercedes-Benz Pullman",
                    "7": "Rolls-Royce Sweptail", "8": "Bugatti Bolide", "9": "Aurus Senat Limousine", "10": "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —É–Ω–∏—Ç–∞–∑ üå≤"}
            car_description = car.get(str(user_info['car']), '')
            if car_description:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                display_property += f"\n„Ö§üöó {car_description}"

        if 'yacht' in user_info and user_info['yacht'] is not None:
            yacht = {"1": "Seven Seas", "2": "Octopus", "3": "Lady Moura", "4": "Al Mirqab", 
                      "5": "Eclipse", "6": "Histoty SUPREMEE", "7": "–ë–∞—Ä–∞–Ω–∫–∞"}
            yacht_description = yacht.get(str(user_info['yacht']), '')
            if yacht_description:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                display_property += f"\n„Ö§üõ•Ô∏è {yacht_description}"

        if display_property == "\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:":
            display_property += '\n„Ö§„Ö§–ü—É—Å—Ç–æ'

        profile_message = (
            f"@id{user_info['id']}({user_info['nickname']}), –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:"
            f"\n\nüîé ID: {user_info['bot_id']}" +
            (f"\n{display_status}" if display_status else "") +
            f"\nüèÜ {user_info['cups']} –ö—É–±–∫–æ–≤"
            f"\nüí∏ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:,}$".replace(',', '.') +
            f"\n‚≠ê {exp:,} EXP".replace(',', '.') +
            f"\nüíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user_info['bitcoin']:,}‚Çø".replace(',', '.') +
            display_property
        )
        attachment = await generate_profile_image(flat=user_info['flat'], car=user_info['car'])
        return await message.answer(profile_message, attachment=attachment)

    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text="–ë–∞–ª–∞–Ω—Å")
async def balance(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –±–∞–ª–∞–Ω—Å:"
                             f"\n\nüí∏ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:,}$".replace(',', '.') +
                             f"\nüíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user_info['bitcoin']:,}‚Çø".replace(',', '.'))
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text=['–ù–∏–∫', '–ù–∏–∫ <newnickname>'])
async def changenickname(message: Message, newnickname=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if not newnickname:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∏–∫ ¬´–Ω–æ–≤—ã–π –Ω–∏–∫¬ª")
        else:
            if len(newnickname) > 32:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
            elif len(newnickname) < 3:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), "
                    "–Ω–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
            else:
                random_phrase = random.choice(list(phrases.values()))
                await insert_newnickname(user_id=user[0].id, newnickname=newnickname)
                return await message.answer(f"@id{user_info['id']}({newnickname}), " + random_phrase)
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)
    

@ul.message(text=["–¢–æ–ø", "–¢–æ–ø <type>"])
async def top(message: Message, type=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if type in ["–±–∞–ª–∞–Ω—Å", "–ø–æ –±–∞–ª–∞–Ω—Å—É"]:
            top_users = await get_top_users_by_them(type='balance')
            user_place = await get_user_place_in_top(user_info['id'], top_users)
            top_users_str = "\n".join([f"{emoji_dict[str(i+1)]} @id{user[0]}({user[1]}) | ${format_number(user[2])}" for i, user in enumerate(top_users)])
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n{top_users_str}\n\n‚û°{emoji_dict[str(user_place)]} @id{user_info['id']}({user_info['nickname']}) | ${format_number(user_info['balance'])}")
        elif type in ["—É–¥–æ—á–∫–∞", "–ø–æ —É–¥–æ—á–∫–µ"]:
            top_users = await get_top_users_by_them(type='fishing_rob_level')
            user_place = await get_user_place_in_top(user_info['id'], top_users)
            top_users_str = "\n".join([f"{emoji_dict[str(i+1)]} @id{user[0]}({user[1]}) | LVL {format_number(user[2])}" for i, user in enumerate(top_users)])
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é —É–¥–æ—á–∫–∏:\n\n{top_users_str}\n\n‚û°{emoji_dict[str(user_place)]} @id{user_info['id']}({user_info['nickname']}) | LVL {format_number(user_info['fishing_rob_level'])}")
        else:
            photo_id = "photo-222672748_456239024_acb7a0d480f3dec3fe"
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø—ã:"
                    "\n\n1. –ü–æ –±–∞–ª–∞–Ω—Å—É (–±–∞–ª–∞–Ω—Å)"
                    "\n2. –ü–æ —É–¥–æ—á–∫–µ (—É–¥–æ—á–∫–∞)"
                    "\n\n‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–æ–ø ¬´–±–∞–ª–∞–Ω—Å¬ª", attachment=photo_id)
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        return await message.answer(successfull_registration)


@ul.message(text="–ë–æ–Ω—É—Å")
async def bonus(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    price = random.randint(1000, 100000)
    exp = random.randint(100, 500)
    if user_info:
        now = datetime.now()
        if user_info['last_bonus_time'] is None:
            exp_count = user_info['exp']
            await bonus_get(user_id=user_info['id'], price=price, price_exp=exp, exp_count=exp_count)
            await update_user_bonus_time(user_id=user_info['id'], last_bonus_time=now.isoformat())
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–µ—Ä–∂–∏—Ç–µ –±–æ–Ω—É—Å {price:,}$ –∏ {exp:,} EXP üòé".replace(',', '.'))
        else:   
            if now - user_info['last_bonus_time'] < timedelta(hours=24):
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—à—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ ‚ùå")
            else:
                exp_count = user_info['exp']
                await bonus_get(user_id=user_info['id'], price=price, price_exp=exp, exp_count=exp_count)
                await update_user_bonus_time(user_id=user_info['id'], last_bonus_time=now.isoformat())
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –¥–µ—Ä–∂–∏—Ç–µ –±–æ–Ω—É—Å {price:,}$ –∏ {exp:,} EXP üòé".replace(',', '.'))
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name) 
        await message.answer(successfull_registration)


@ul.message(text="–ì–æ–Ω–∫–∞")
async def race(message: Message):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    now = datetime.now()
    if user_info:
        if user_info['car'] is None or user_info['car'] == 0:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã ‚ùå")
        else:
            if user_info['last_race_time'] is None or now - user_info['last_race_time'] > timedelta(minutes=20):
                users_with_cars = await get_users_by_them(type='car')
                opponent = await get_random_user(users=users_with_cars, excluded_user_id=user_info['id'])
                sent_message = await message.answer(
                    f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–∞—á–∞–ª–∏ –≥–æ–Ω–∫—É –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) üèÅ\n\n‚åõ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ 4"
                )
                if int(user_info['car']) > int(opponent['car']):
                    for i in reversed(range(-1, 3)):
                        await asyncio.sleep(1)
                        new_text = f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–∞—á–∞–ª–∏ –≥–æ–Ω–∫—É –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) üèÅ\n\n‚åõ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ {i+1}"
                        await bot.api.messages.edit(
                            peer_id=sent_message.peer_id,
                            message=new_text,
                            **{
                                attr: getattr(sent_message, attr)
                                for attr in ['message_id', 'conversation_message_id']
                                if hasattr(sent_message, attr) and getattr(sent_message, attr)
                            }
                        )
                    new_text = f"@id{user_info['id']}({user_info['nickname']}), –≥–æ–Ω–∫–∞ –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üèÅ\n\n ü•á –í—ã –ø—Ä–∏—à–ª–∏ –∫ —Ñ–∏–Ω–∏—à—É –ø–µ—Ä–≤—ã–º! +100 üèÜ"
                    await race_update_cooldown(user_id=user_info['id'], new_race_time=now.isoformat())
                    await race_update_cups(user_id=user_info['id'],operation='+', count=100, cups=user_info['cups'])
                    await bot.api.messages.edit(
                        peer_id=sent_message.peer_id,
                        message=new_text,
                        **{
                            attr: getattr(sent_message, attr)
                            for attr in ['message_id', 'conversation_message_id']
                            if hasattr(sent_message, attr) and getattr(sent_message, attr)
                        }
                    )
                    await message.answer(sticker_id=83931)
                    return
                elif int(user_info['car']) < int(opponent['car']):
                    for i in reversed(range(-1, 3)):
                        await asyncio.sleep(1)
                        new_text = f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–∞—á–∞–ª–∏ –≥–æ–Ω–∫—É –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) üèÅ\n\n‚åõ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ {i+1}"
                        await bot.api.messages.edit(
                            peer_id=sent_message.peer_id,
                            message=new_text,
                            **{
                                attr: getattr(sent_message, attr)
                                for attr in ['message_id', 'conversation_message_id']
                                if hasattr(sent_message, attr) and getattr(sent_message, attr)
                            }
                        )
                    new_text = f"@id{user_info['id']}({user_info['nickname']}), –≥–æ–Ω–∫–∞ –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üèÅ\n\n ü•à –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏—à–µ–ª –∫ —Ñ–∏–Ω–∏—à—É –ø–µ—Ä–≤—ã–º! -100 üèÜ"
                    await race_update_cooldown(user_id=user_info['id'], new_race_time=now.isoformat())
                    await race_update_cups(user_id=user_info['id'],operation='-', count=100, cups=user_info['cups'])
                    await bot.api.messages.edit(
                        peer_id=sent_message.peer_id,
                        message=new_text,
                        **{
                            attr: getattr(sent_message, attr)
                            for attr in ['message_id', 'conversation_message_id']
                            if hasattr(sent_message, attr) and getattr(sent_message, attr)
                        }
                    )
                    await message.answer(sticker_id=83936)
                    return
                else:
                    for i in reversed(range(-1, 3)):
                        await asyncio.sleep(1)
                        new_text = f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–∞—á–∞–ª–∏ –≥–æ–Ω–∫—É –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) üèÅ\n\n‚åõ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ {i+1}"
                        await bot.api.messages.edit(
                            peer_id=sent_message.peer_id,
                            message=new_text,
                            **{
                                attr: getattr(sent_message, attr)
                                for attr in ['message_id', 'conversation_message_id']
                                if hasattr(sent_message, attr) and getattr(sent_message, attr)
                            }
                        )
                    new_text = f"@id{user_info['id']}({user_info['nickname']}), –≥–æ–Ω–∫–∞ –ø—Ä–æ—Ç–∏–≤ @id{opponent['id']}({opponent['nickname']}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üèÅ\n\n ü•à –í—ã —Å–≤–µ–ª–∏ —Å—á–µ—Ç –≤ –Ω–∏—á—å—é! +0 üèÜ"
                    await race_update_cooldown(user_id=user_info['id'], new_race_time=now.isoformat())
                    await bot.api.messages.edit(
                        peer_id=sent_message.peer_id,
                        message=new_text,
                        **{
                            attr: getattr(sent_message, attr)
                            for attr in ['message_id', 'conversation_message_id']
                            if hasattr(sent_message, attr) and getattr(sent_message, attr)
                        }
                    )
                    await message.answer(sticker_id=79410)
                    return
            else:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç ‚ùå")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name)
        await message.answer(successfull_registration)


@ul.message(text=["–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ <id> <count>"])
async def transfer(message: Message, id=None, count=None):
    user = await bot.api.users.get(message.from_id)
    user_info = await get_user(user_id=user[0].id)
    if user_info:
        if id is not None:
            if count is not None:
                opponent = await bot_get_user(user_id=id)
                if opponent:
                    count = await converter(count)
                    if count > user_info['balance']:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
                    if count > 50000000 and user_info['status'] not in ["VIP", "ELITE", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"]:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIP-—Å—Ç–∞—Ç—É—Å.")
                    elif count > 100000000 and user_info['status'] not in ["ELITE", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"]:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ 100 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ELITE-—Å—Ç–∞—Ç—É—Å.")
                    elif count > 200000000 and user_info['status'] not in ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"]:
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à–µ 200 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é‚ùå\n\n‚ú® –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    else:
                        await transfer_money(user_id=user_info['id'], operation='-', count=count)
                        await transfer_money(user_id=opponent['id'], operation='+', count=count)
                        await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ @id{opponent['id']}({opponent['nickname']}) {count:,}$ ‚úÖ".replace(',', '.'))
                        message = f"@id{user_info['id']}({user_info['nickname']}) –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º {count:,}$ üòé".replace(',', '.')
                        await bot.api.messages.send(user_id=opponent['id'], random_id=0, message=message)
                        await bot.api.messages.send(user_id=opponent['id'], random_id=0, sticker_id=21099)
                else:
                    await message.answer(f"@id{user_info['id']}({user_info['nickname']}), —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå")
            else:
                await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ¬´ID¬ª ¬´—Å—É–º–º–∞¬ª‚ùå")
        else:
            await message.answer(f"@id{user_info['id']}({user_info['nickname']}), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ¬´ID¬ª ¬´—Å—É–º–º–∞¬ª‚ùå")
    else:
        await insert_user(user_id=user[0].id, first_name=user[0].first_name)
        await message.answer(successfull_registration)